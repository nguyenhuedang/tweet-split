"use strict";var sinon=require("sinon"),AssertionError=require("chai").AssertionError,expect=require("chai").expect,swallow=require("./common").swallow;describe("Throwing",function(){describe("thrown()",function(){it("should throw an assertion error if the spy does not throw at all",function(){var a=sinon.spy.create(function(){});a(),expect(function(){a.should.have.thrown()}).to.throw(AssertionError),expect(function(){a.getCall(0).should.have.thrown()}).to.throw(AssertionError)}),it("should not throw if the spy throws",function(){var a=sinon.spy.create(function(){throw new Error});swallow(a),expect(function(){a.should.have.thrown()}).to.not.throw(),expect(function(){a.getCall(0).should.have.thrown()}).to.not.throw()}),it("should not throw if the spy throws once but not the next time",function(){var a=sinon.spy.create(function(){if(!(1<a.callCount))throw new Error});swallow(a),swallow(a),expect(function(){a.should.have.thrown()}).to.not.throw(),expect(function(){a.getCall(0).should.have.thrown()}).to.not.throw()})}),describe("thrown(errorObject)",function(){var a=null;beforeEach(function(){a=new Error("boo!")}),it("should throw an assertion error if the spy does not throw at all",function(){var b=sinon.spy.create(function(){});b(),expect(function(){b.should.have.thrown(a)}).to.throw(AssertionError),expect(function(){b.getCall(0).should.have.thrown(a)}).to.throw(AssertionError)}),it("should throw an assertion error if the spy throws the wrong error",function(){var b=sinon.spy.create(function(){return new Error("eek!")});swallow(b),expect(function(){b.should.have.thrown(a)}).to.throw(AssertionError),expect(function(){b.getCall(0).should.have.thrown(a)}).to.throw(AssertionError)}),it("should not throw if the spy throws",function(){var b=sinon.spy.create(function(){throw a});swallow(b),expect(function(){b.should.have.thrown(a)}).to.not.throw(),expect(function(){b.getCall(0).should.have.thrown(a)}).to.not.throw()}),it("should not throw if the spy throws once but not the next time",function(){var b=sinon.spy.create(function(){if(!(1<b.callCount))throw a});swallow(b),swallow(b),expect(function(){b.should.have.thrown(a)}).to.not.throw(),expect(function(){b.getCall(0).should.have.thrown(a)}).to.not.throw()})}),describe("thrown(errorTypeString)",function(){var a=null;beforeEach(function(){a=new TypeError("boo!")}),it("should throw an assertion error if the spy does not throw at all",function(){var b=sinon.spy.create(function(){});b(),expect(function(){b.should.have.thrown("TypeError")}).to.throw(AssertionError),expect(function(){b.getCall(0).should.have.thrown("TypeError")}).to.throw(AssertionError)}),it("should throw an assertion error if the spy throws the wrong type of error",function(){var b=sinon.spy.create(function(){throw new Error("boo!")});swallow(b),expect(function(){b.should.have.thrown("TypeError")}).to.throw(AssertionError),expect(function(){b.getCall(0).should.have.thrown("TypeError")}).to.throw(AssertionError)}),it("should not throw if the spy throws the correct type of error",function(){var b=sinon.spy.create(function(){throw new TypeError("eek!")});swallow(b),expect(function(){b.should.have.thrown("TypeError")}).to.not.throw(),expect(function(){b.getCall(0).should.have.thrown("TypeError")}).to.not.throw()}),it("should not throw if the spy throws once but not the next time",function(){var b=sinon.spy.create(function(){if(!(1<b.callCount))throw a});swallow(b),swallow(b),expect(function(){b.should.have.thrown("TypeError")}).to.not.throw(),expect(function(){b.getCall(0).should.have.thrown("TypeError")}).to.not.throw()})}),describe("always thrown",function(){var a=null;beforeEach(function(){a=new TypeError("boo!")}),it("should throw an assertion error if the spy throws once but not the next time",function(){var b=sinon.spy.create(function(){if(!(1<b.callCount))throw a});swallow(b),swallow(b),expect(function(){b.should.have.always.thrown()}).to.throw(AssertionError),expect(function(){b.should.always.have.thrown()}).to.throw(AssertionError),expect(function(){b.should.have.always.thrown(a)}).to.throw(AssertionError),expect(function(){b.should.always.have.thrown(a)}).to.throw(AssertionError),expect(function(){b.should.have.always.thrown("TypeError")}).to.throw(AssertionError),expect(function(){b.should.always.have.thrown("TypeError")}).to.throw(AssertionError)}),it("should throw an assertion error if the spy throws the wrong error the second time",function(){var b=sinon.spy.create(function(){if(1===b.callCount)throw a;else throw new Error});swallow(b),swallow(b),expect(function(){b.should.have.always.thrown(a)}).to.throw(AssertionError),expect(function(){b.should.always.have.thrown(a)}).to.throw(AssertionError),expect(function(){b.should.have.always.thrown("TypeError")}).to.throw(AssertionError),expect(function(){b.should.always.have.thrown("TypeError")}).to.throw(AssertionError)}),it("should not throw if the spy always throws the right error",function(){var b=sinon.spy.create(function(){throw a});swallow(b),swallow(b),expect(function(){b.should.have.always.thrown(a)}).to.not.throw(),expect(function(){b.should.always.have.thrown(a)}).to.not.throw(),expect(function(){b.should.have.always.thrown("TypeError")}).to.not.throw(),expect(function(){b.should.always.have.thrown("TypeError")}).to.not.throw()})})});