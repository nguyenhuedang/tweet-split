"use strict";var sinon=require("sinon"),AssertionError=require("chai").AssertionError,expect=require("chai").expect;describe("Call arguments",function(){var a=null,b=null,c=null,d=null,e=null,f=null,g=null;beforeEach(function(){a=sinon.spy(),b="A",c="B",d={D:"E"},e={D:{E:{E:"P"}}},f="C",g=sinon.match.any}),describe("calledWith",function(){it("should throw an assertion error when the spy is not called",function(){expect(function(){a.should.have.been.calledWith(b,c)}).to.throw(AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){a(b,c),expect(function(){a.should.have.been.calledWith(b,c)}).to.not.throw(),expect(function(){a.getCall(0).should.have.been.calledWith(b,c)}).to.not.throw()}),it("should not throw when the spy is called with the correct arguments and more",function(){a(b,c,f),expect(function(){a.should.have.been.calledWith(b,c)}).to.not.throw(),expect(function(){a.getCall(0).should.have.been.calledWith(b,c)}).to.not.throw()}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){a(f,b),expect(function(){a.should.have.been.calledWith(b,c)}).to.throw(AssertionError),expect(function(){a.getCall(0).should.have.been.calledWith(b,c)}).to.throw(AssertionError)}),it("should not throw when the spy is called with incorrect arguments but then correct ones",function(){a(f,b),a(b,c),expect(function(){a.should.have.been.calledWith(b,c)}).to.not.throw(),expect(function(){a.getCall(1).should.have.been.calledWith(b,c)}).to.not.throw()}),it("should handle objects in arguments",function(){a(b,d);var h=JSON.parse(JSON.stringify(d));expect(function(){a.should.have.been.calledWith(b,h)}).to.not.throw(),expect(function(){a.getCall(0).should.have.been.calledWith(b,h)}).to.not.throw()}),it("should handle deep objects in arguments",function(){a(b,e);var h=JSON.parse(JSON.stringify(e));expect(function(){a.should.have.been.calledWith(b,h)}).to.not.throw(),expect(function(){a.getCall(0).should.have.been.calledWith(b,h)}).to.not.throw()})}),describe("always calledWith",function(){it("should throw an assertion error when the spy is not called",function(){expect(function(){a.should.always.have.been.calledWith(b,c)}).to.throw(AssertionError),expect(function(){a.should.have.always.been.calledWith(b,c)}).to.throw(AssertionError),expect(function(){a.should.have.been.always.calledWith(b,c)}).to.throw(AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){a(b,c),expect(function(){a.should.always.have.been.calledWith(b,c)}).to.not.throw(),expect(function(){a.should.have.always.been.calledWith(b,c)}).to.not.throw(),expect(function(){a.should.have.been.always.calledWith(b,c)}).to.not.throw()}),it("should not throw when the spy is called with the correct arguments and more",function(){a(b,c,f),expect(function(){a.should.always.have.been.calledWith(b,c)}).to.not.throw(),expect(function(){a.should.have.always.been.calledWith(b,c)}).to.not.throw(),expect(function(){a.should.have.been.always.calledWith(b,c)}).to.not.throw()}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){a(f,b),expect(function(){a.should.always.have.been.calledWith(b,c)}).to.throw(AssertionError),expect(function(){a.should.have.always.been.calledWith(b,c)}).to.throw(AssertionError),expect(function(){a.should.have.been.always.calledWith(b,c)}).to.throw(AssertionError)}),it("should throw an assertion error when the spy is called with incorrect arguments but then correct ones",function(){a(f,b),a(b,c),expect(function(){a.should.always.have.been.calledWith(b,c)}).to.throw(AssertionError),expect(function(){a.should.have.always.been.calledWith(b,c)}).to.throw(AssertionError),expect(function(){a.should.have.been.always.calledWith(b,c)}).to.throw(AssertionError)})}),describe("calledWithExactly",function(){it("should throw an assertion error when the spy is not called",function(){expect(function(){a.should.have.been.calledWithExactly(b,c)}).to.throw(AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){a(b,c),expect(function(){a.should.have.been.calledWithExactly(b,c)}).to.not.throw(),expect(function(){a.getCall(0).should.have.been.calledWithExactly(b,c)}).to.not.throw()}),it("should throw an assertion error when the spy is called with the correct arguments and more",function(){a(b,c,f),expect(function(){a.should.have.been.calledWithExactly(b,c)}).to.throw(AssertionError),expect(function(){a.getCall(0).should.have.been.calledWithExactly(b,c)}).to.throw(AssertionError)}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){a(f,b),expect(function(){a.should.have.been.calledWithExactly(b,c)}).to.throw(AssertionError),expect(function(){a.getCall(0).should.have.been.calledWithExactly(b,c)}).to.throw(AssertionError)}),it("should not throw when the spy is called with incorrect arguments but then correct ones",function(){a(f,b),a(b,c),expect(function(){a.should.have.been.calledWithExactly(b,c)}).to.not.throw(),expect(function(){a.getCall(1).should.have.been.calledWithExactly(b,c)}).to.not.throw()})}),describe("always calledWithExactly",function(){it("should throw an assertion error when the spy is not called",function(){expect(function(){a.should.always.have.been.calledWithExactly(b,c)}).to.throw(AssertionError),expect(function(){a.should.have.always.been.calledWithExactly(b,c)}).to.throw(AssertionError),expect(function(){a.should.have.been.always.calledWithExactly(b,c)}).to.throw(AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){a(b,c),expect(function(){a.should.always.have.been.calledWithExactly(b,c)}).to.not.throw(),expect(function(){a.should.have.always.been.calledWithExactly(b,c)}).to.not.throw(),expect(function(){a.should.have.been.always.calledWithExactly(b,c)}).to.not.throw()}),it("should throw an assertion error when the spy is called with the correct arguments and more",function(){a(b,c,f),expect(function(){a.should.always.have.been.calledWithExactly(b,c)}).to.throw(AssertionError),expect(function(){a.should.have.always.been.calledWithExactly(b,c)}).to.throw(AssertionError),expect(function(){a.should.have.been.always.calledWithExactly(b,c)}).to.throw(AssertionError)}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){a(f,b),expect(function(){a.should.always.have.been.calledWithExactly(b,c)}).to.throw(AssertionError),expect(function(){a.should.have.always.been.calledWithExactly(b,c)}).to.throw(AssertionError),expect(function(){a.should.have.been.always.calledWithExactly(b,c)}).to.throw(AssertionError)}),it("should throw an assertion error when the spy is called with incorrect arguments but then correct ones",function(){a(f,b),a(b,c),expect(function(){a.should.always.have.been.calledWithExactly(b,c)}).to.throw(AssertionError),expect(function(){a.should.have.always.been.calledWithExactly(b,c)}).to.throw(AssertionError),expect(function(){a.should.have.been.always.calledWithExactly(b,c)}).to.throw(AssertionError)})}),describe("calledWithMatch",function(){it("should throw an assertion error when the spy is not called",function(){expect(function(){a.should.have.been.calledWithMatch(g,g)}).to.throw(AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){a(b,c),expect(function(){a.should.have.been.calledWithMatch(g,g)}).to.not.throw(),expect(function(){a.getCall(0).should.have.been.calledWithMatch(g,g)}).to.not.throw()}),it("should not throw when the spy is called with the correct arguments and more",function(){a(b,c,f),expect(function(){a.should.have.been.calledWithMatch(g,g)}).to.not.throw(),expect(function(){a.getCall(0).should.have.been.calledWithMatch(g,g)}).to.not.throw()}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){a(f,b),expect(function(){a.should.have.been.calledWithMatch(g,c)}).to.throw(AssertionError),expect(function(){a.getCall(0).should.have.been.calledWithMatch(b,g)}).to.throw(AssertionError)}),it("should not throw when the spy is called with incorrect arguments but then correct ones",function(){a(f,b),a(b,c),expect(function(){a.should.have.been.calledWithMatch(b,c)}).to.not.throw(),expect(function(){a.getCall(1).should.have.been.calledWithMatch(b,c)}).to.not.throw()})}),describe("always calledWithMatch",function(){it("should throw an assertion error when the spy is not called",function(){expect(function(){a.should.always.have.been.calledWithMatch(g,g)}).to.throw(AssertionError),expect(function(){a.should.have.always.been.calledWithMatch(b,g)}).to.throw(AssertionError),expect(function(){a.should.have.been.always.calledWithMatch(g,c)}).to.throw(AssertionError)}),it("should not throw when the spy is called with the correct arguments",function(){a(b,c),expect(function(){a.should.always.have.been.calledWithMatch(g,g)}).to.not.throw(),expect(function(){a.should.have.always.been.calledWithMatch(g,c)}).to.not.throw(),expect(function(){a.should.have.been.always.calledWithMatch(b,g)}).to.not.throw()}),it("should not throw when the spy is called with the correct arguments and more",function(){a(b,c,f),expect(function(){a.should.always.have.been.calledWithMatch(g,g)}).to.not.throw(),expect(function(){a.should.have.always.been.calledWithMatch(g,c)}).to.not.throw(),expect(function(){a.should.have.been.always.calledWithMatch(b,g)}).to.not.throw()}),it("should throw an assertion error when the spy is called with incorrect arguments",function(){a(f,b),expect(function(){a.should.always.have.been.calledWithMatch(g,c)}).to.throw(AssertionError),expect(function(){a.should.have.always.been.calledWithMatch(b,g)}).to.throw(AssertionError),expect(function(){a.should.have.been.always.calledWithMatch(b,c)}).to.throw(AssertionError)}),it("should throw an assertion error when the spy is called with incorrect arguments but then correct ones",function(){a(f,b),a(b,c),expect(function(){a.should.always.have.been.calledWithMatch(b,c)}).to.throw(AssertionError),expect(function(){a.should.have.always.been.calledWithMatch(b,c)}).to.throw(AssertionError),expect(function(){a.should.have.been.always.calledWithMatch(b,c)}).to.throw(AssertionError)})})});