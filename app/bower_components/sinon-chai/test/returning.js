"use strict";var sinon=require("sinon"),AssertionError=require("chai").AssertionError,expect=require("chai").expect;describe("Returning",function(){describe("returned",function(){it("should throw an assertion error if the spy does not return the correct value",function(){var a=sinon.spy.create(function(){return 1});a(),expect(function(){a.should.have.returned(2)}).to.throw(AssertionError),expect(function(){a.getCall(0).should.have.returned(2)}).to.throw(AssertionError)}),it("should not throw if the spy returns the correct value",function(){var a=sinon.spy.create(function(){return 1});a(),expect(function(){a.should.have.returned(1)}).to.not.throw(),expect(function(){a.getCall(0).should.have.returned(1)}).to.not.throw()}),it("should not throw if the spy returns the correct value amongst others",function(){var a=[1,2,3],b=sinon.spy.create(function(){return a[b.callCount-1]});b(),b(),b(),expect(function(){b.should.have.returned(1)}).to.not.throw(),expect(function(){b.getCall(0).should.have.returned(1)}).to.not.throw()})}),describe("always returned",function(){it("should throw an assertion error if the spy does not return the correct value",function(){var a=sinon.spy.create(function(){return 1});a(),expect(function(){a.should.always.have.returned(2)}).to.throw(AssertionError),expect(function(){a.should.have.always.returned(2)}).to.throw(AssertionError)}),it("should not throw if the spy returns the correct value",function(){var a=sinon.spy.create(function(){return 1});a(),expect(function(){a.should.have.always.returned(1)}).to.not.throw(),expect(function(){a.should.always.have.returned(1)}).to.not.throw()}),it("should throw an assertion error if the spy returns the correct value amongst others",function(){var a=[1,2,3],b=sinon.spy.create(function(){a[b.callCount-1]});b(),b(),b(),expect(function(){b.should.always.have.returned(1)}).to.throw(AssertionError),expect(function(){b.should.have.always.returned(1)}).to.throw(AssertionError)})})});