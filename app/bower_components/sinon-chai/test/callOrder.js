"use strict";var sinon=require("sinon"),AssertionError=require("chai").AssertionError,expect=require("chai").expect;describe("Call order",function(){var a=sinon.spy(),b=null,c=null;beforeEach(function(){a=sinon.spy(),b=sinon.spy(),c=sinon.spy()}),describe("spy1 calledBefore spy2",function(){it("should throw an assertion error when neither spy is called",function(){expect(function(){a.should.have.been.calledBefore(b)}).to.throw(AssertionError)}),it("should not throw when only spy 1 is called",function(){a(),expect(function(){a.should.have.been.calledBefore(b)}).to.not.throw()}),it("should throw an assertion error when only spy 2 is called",function(){b(),expect(function(){a.should.have.been.calledBefore(b)}).to.throw(AssertionError)}),it("should not throw when spy 1 is called before spy 2",function(){a(),b(),expect(function(){a.should.have.been.calledBefore(b)}).to.not.throw()}),it("should throw an assertion error when spy 1 is called after spy 2",function(){b(),a(),expect(function(){a.should.have.been.calledBefore(b)}).to.throw(AssertionError)})}),a.calledImmediatelyBefore&&describe("spy1 calledImmediatelyBefore spy2",function(){it("should throw an assertion error when neither spy is called",function(){expect(function(){a.should.have.been.calledImmediatelyBefore(b)}).to.throw(AssertionError)}),it("should throw an assertion error when only spy 1 is called",function(){a(),expect(function(){a.should.have.been.calledImmediatelyBefore(b)}).to.throw(AssertionError)}),it("should throw an assertion error when only spy 2 is called",function(){b(),expect(function(){a.should.have.been.calledImmediatelyBefore(b)}).to.throw(AssertionError)}),it("should not throw when spy 1 is called immediately before spy 2",function(){a(),b(),expect(function(){a.should.have.been.calledImmediatelyBefore(b)}).to.not.throw()}),it("should throw an assertion error when spy 1 is called before spy 2, but not immediately",function(){b(),c(),a(),expect(function(){a.should.have.been.calledImmediatelyBefore(b)}).to.throw(AssertionError)}),it("should throw an assertion error when spy 1 is called after spy 2",function(){b(),a(),expect(function(){a.should.have.been.calledImmediatelyBefore(b)}).to.throw(AssertionError)})}),describe("spy1 calledAfter spy2",function(){it("should throw an assertion error when neither spy is called",function(){expect(function(){a.should.have.been.calledAfter(b)}).to.throw(AssertionError)}),it("should throw an assertion error when only spy 1 is called",function(){a(),expect(function(){a.should.have.been.calledAfter(b)}).to.throw(AssertionError)}),it("should throw an assertion error when only spy 2 is called",function(){b(),expect(function(){a.should.have.been.calledAfter(b)}).to.throw(AssertionError)}),it("should throw an assertion error when spy 1 is called before spy 2",function(){a(),b(),expect(function(){a.should.have.been.calledAfter(b)}).to.throw(AssertionError)}),it("should not throw when spy 1 is called after spy 2",function(){b(),a(),expect(function(){a.should.have.been.calledAfter(b)}).to.not.throw()})}),a.calledImmediatelyAfter&&describe("spy1 calledImmediatelyAfter spy2",function(){it("should throw an assertion error when neither spy is called",function(){expect(function(){a.should.have.been.calledImmediatelyAfter(b)}).to.throw(AssertionError)}),it("should throw an assertion error when only spy 1 is called",function(){a(),expect(function(){a.should.have.been.calledImmediatelyAfter(b)}).to.throw(AssertionError)}),it("should throw an assertion error when only spy 2 is called",function(){b(),expect(function(){a.should.have.been.calledImmediatelyAfter(b)}).to.throw(AssertionError)}),it("should throw an assertion error when spy 1 is called before spy 2",function(){a(),b(),expect(function(){a.should.have.been.calledImmediatelyAfter(b)}).to.throw(AssertionError)}),it("should not throw when spy 1 is called immediately after spy 2",function(){b(),a(),expect(function(){a.should.have.been.calledImmediatelyAfter(b)}).to.not.throw()}),it("should throw an assertion error when spy 1 is called after spy 2, but not immediately",function(){a(),c(),b(),expect(function(){a.should.have.been.calledImmediatelyAfter(b)}).to.throw(AssertionError)})})});